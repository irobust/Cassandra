These demos assume you have a running docker environment with a locally mounted directory, or are running local copy of Cassandra, as outlined in the module three demos.txt

-----

From cqlsh, run the "source" command to load the "courses" table from the last module

    source '/scripts/m3/courses.cql';

Display the courses table schema and notice it's the seven columns from the the end of the last module

    use pluralsight;
    desc table courses;

Select data from this table and see the five sample courses we loaded from our file

    select * from courses;

Drop this table and create a new one to hold both course and module data

    drop table courses;
    create table courses (
        id varchar,
        name varchar,
        author varchar,
        audience int,
        duration int,
        cc boolean,
        released timestamp,
        module_id int,
        module_name varchar,
        module_duration int,
        primary key (id, module_id)
    ) with comment = 'A table of courses and modules';

Insert data for the course, plus the first two modules

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19',1,'Getting Started with Node.js',2174);

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19',2,'Modules, require() and NPM',1063);

Select the data we just inserted

    select * from courses;
    select * from courses where id = 'node-intro';

Now we can include both id and module_id in our where clause

    select * from courses where id = 'node-intro' and module_id = 2;

We can't select by just module, unless we enable 'ALLOW FILTERING'

    select * from courses where module_id = 2;                  // fails
    select * from courses where module_id = 2 allow filtering   // succeeds

Now insert the remaining modules for the course

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19', 3, 'Events and Streams', 1595);

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19', 4, 'Accessing the Local System', 1040);

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19', 5, 'Interacting with the Web', 1300);

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19', 6, 'Testing and Debugging', 1658);

    insert into courses (id, name, author, audience, duration, cc, released, module_id, module_name, module_duration)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19', 7, 'Scaling Your Node Application', 1257);

We can also use module_id as part of an "in" clause

    select * from courses where id = 'node-intro' and module_id in (2,3,4);

And we can order by module_id

    select * from courses where id = 'node-intro' order by module_id desc;

We can "select disinct" just the id, but not the id and course name:

    select distinct id from courses;         // succeeds
    select distinct id, name from courses;   // fails

-----

From cqlsh, drop and recreate the courses table, using static columns

    use pluralsight;
    drop table courses;
    create table courses (
        id varchar,
        name varchar static,
        author varchar static,
        audience int static,
        duration int static,
        cc boolean static,
        released timestamp static,
        module_id int,
        module_name varchar,
        module_duration int,
        primary key (id, module_id)
    ) with comment = 'A table of courses and modules';

Insert just the course data, and select it back

    insert into courses (id, name, author, audience, duration, cc, released)
    values ('node-intro','Introduction to Node.js','Paul O''Fallon', 2, 10080, true, '2012-12-19');

    select * from courses where id = 'node-intro';

Now insert the module data for the first two modules

    insert into courses (id, module_id, module_name, module_duration)
    values ('node-intro',1,'Getting Started with Node.js',2174);

    insert into courses (id, module_id, module_name, module_duration)
    values ('node-intro',2,'Modules, require() and NPM',1063);

Selecting from courses now returns both course and module data in each row

    select * from courses where id = 'node-intro';
    select * from courses where id = 'node-intro' and module_id = 2;

Insert the third module, but also change the name of the course.  Select all rows to show the course title changed everywhere.

    insert into courses (id, name, module_id, module_name, module_duration)
    values ('node-intro', 'Intro to Node', 3, 'Events and Streams', 1595);

    select * from courses where id = 'node-intro';

Insert the fourth module, and fix the course name

    insert into courses (id, name, module_id, module_name, module_duration)
    values ('node-intro', 'Introduction to Node.js', 4, 'Accessing the Local System', 1040);

Insert the remaining course modules

    insert into courses (id, module_id, module_name, module_duration)
    values ('node-intro', 5, 'Interacting with the Web', 1300);

    insert into courses (id, module_id, module_name, module_duration)
    values ('node-intro', 6, 'Testing and Debugging', 1658);

    insert into courses (id, module_id, module_name, module_duration)
    values ('node-intro', 7, 'Scaling Your Node Application', 1257);

The 'in' and 'order by' clauses work the same as before

    select * from courses where id = 'node-intro' and module_id in (2,3,4);

    select * from courses where id = 'node-intro' order by module_id desc;

Select course info, repeated based on the number of modules in the course

    select id, name, author, audience, duration, cc, released from courses;

Now "select distinct" course info and only get one row back

    select distinct id, name, author, audience, duration, cc, released from courses;

Select just the module information for the course

    select module_id, module_name, module_duration from courses where id = 'node-intro';

-----

From cqlsh, run the "source" command to load the "courses" table with module-level data from all 5 courses

    source '/scripts/m4/courses.cql';

Select module information for the 'advanced-javascript' course

    select module_id, module_name, module_description from courses where id = 'advanced-javascript';

Select module information for the 'docker-fundamentals' course

    select module_id, module_name, module_description from courses where id = 'docker-fundamentals';

Select just the course-level information for all 5 courses

    select distinct id, name, author from courses;

-----

From cqlsh, create a new table to hold course page views

    use pluralsight;
    create table course_page_views (
        course_id varchar,
        view_id timeuuid,
        primary key (course_id, view_id)
    ) with clustering order by (view_id desc);

Insert a row into this table, using "now()" to create a timeuuid with the current date/time.  Include a one year TTL.

    insert into course_page_views (course_id, view_id)
    values ('node-intro', now()) using TTL 31536000;

Insert another row into the table with a manually generated v1 UUID (also with a TTL)

    insert into course_page_views (course_id, view_id)
    values ('node-intro', 40664856-1ad2-11e5-b60b-1697f925ec7b) using TTL 31536000;

Insert two more rows using "now()"

    insert into course_page_views (course_id, view_id)
    values ('node-intro', now()) using TTL 31536000;

    insert into course_page_views (course_id, view_id)
    values ('node-intro', now()) using TTL 31536000;

Select the rows, and then use dateOf() to extract the date/time portion of the view_id

    select * from course_page_views;
    select dateOf(view_id) from course_page_views where course_id = 'node-intro';

Reverse the date order of the results

    select dateOf(view_id) from course_page_views where course_id = 'node-intro' order by view_id asc;

Select only those dates based on Timeuuids that span a 2 day range

    select dateOf(view_id) from course_page_views where course_id = 'node-intro'
    and view_id >= maxTimeuuid('2015-06-26 00:00+0000')
    and view_id < minTimeuuid('2015-06-28 00:00+0000');

    // adjust these dates as necessary to match a more current date range

Truncate the table, and add a static column

    truncate course_page_views;
    alter table course_page_views add last_view_id timeuuid static;

Now insert three rows, using "now()" for both Timeuuids (with TTLs)

    insert into course_page_views (course_id, last_view_id, view_id)
    values ('node-intro', now(), now()) using TTL 31536000;

    insert into course_page_views (course_id, last_view_id, view_id)
    values ('node-intro', now(), now()) using TTL 31536000;

    insert into course_page_views (course_id, last_view_id, view_id)
    values ('node-intro', now(), now()) using TTL 31536000;

Selecting all rows shows different view_ids but the same last_view_id for all rows

    select * from course_page_views;

Use 'select distinct' to get just the latest page view for this course

    select distinct course_id, last_view_id from course_page_views;

For just one course, this can also be accomplished with the view_id and a LIMIT clause

    select course_id, view_id from course_page_views where course_id = 'node-intro' limit 1;

However, a 'limit' won't work across multiple courses.  Insert multiple views for another course.

    insert into course_page_views (course_id, last_view_id, view_id)
    values ('advanced-javascript', now(), now()) using TTL 31536000;

    insert into course_page_views (course_id, last_view_id, view_id)
    values ('advanced-javascript', now(), now()) using TTL 31536000;

    insert into course_page_views (course_id, last_view_id, view_id)
    values ('advanced-javascript', now(), now()) using TTL 31536000;

Select latest view_id from each course, using the limit clause

    select course_id, view_id from course_page_views where course_id = 'node-intro' limit 1;
    select course_id, view_id from course_page_views where course_id = 'advanced-javascript' limit 1;

Retrieve the latest course page view for all courses with 'select distinct' and the static column

    select distinct course_id, last_view_id from course_page_views;

Select all the individual views for each course, one at a time

    select course_id, view_id from course_page_views where course_id = 'node-intro';
    select course_id, view_id from course_page_views where course_id = 'advanced-javascript';

-----

From cqlsh, create a new table to hold clickstream data

    use pluralsight;
    create table clickstream (
        year int,
        month int,
        click_id timeuuid,
        ip inet,
        url text,
        primary key ((year, month), click_id)
    ) with clustering order by (click_id desc);

Insert some data into this table, as if the clicks happened in May 2015

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 5, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 5, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 5, now(), '98.203.153.64', 'http://www.pluralsight.com');

Now do the same for June and July

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 6, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 6, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 6, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 7, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 7, now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (year, month, click_id, ip, url)
    values (2015, 7, now(), '98.203.153.64', 'http://www.pluralsight.com');

Select all rows, then limit the results to 10

    select * from clickstream;
    select * from clickstream limit 10;

Select 10 rows for months (7,6), notice they come back for 7, then 6

    select * from clickstream where year = 2015 and month in (7,6) limit 10;

Include month = 5 to get back 10 rows, notice they're in month order as specified in the "in" clause

    select * from clickstream where year = 2015 and month in (7,6,5) limit 10;

Select where month is in (6,7) with a limit of 6, and see month = 6 rows come back first

    select * from clickstream where year = 2015 and month in (6,7) limit 6;

-----

From cqlsh, drop and recreate the clickstream table, using a "bucket_id" this time

    use pluralsight;
    drop table clickstream;
    create table clickstream (
        bucket_id varchar,
        click_id timeuuid,
        ip inet,
        url text,
        primary key (bucket_id, click_id)
    ) with clustering order by (click_id desc);

Now insert a row from December 2015, and a row from January 2016

    insert into clickstream (bucket_id, click_id, ip, url)
    values ('2015-12', now(), '98.203.153.64', 'http://www.pluralsight.com');

    insert into clickstream (bucket_id, click_id, ip, url)
    values ('2016-01', now(), '98.203.153.64', 'http://www.pluralsight.com');    

With this bucket_id, we can now select across year boundaries

    select * from clickstream where bucket_id in ('2016-01', '2015-12');
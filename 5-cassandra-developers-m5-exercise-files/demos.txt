These demos assume you have a running docker environment with a locally mounted directory, or are running local copy of Cassandra, as outlined in the module three demos.txt

-----

From cqlsh, run the "source" command to load the "courses" table from the last module

    source '/scripts/m4/courses.cql';

Take a look at what was just loaded

    use pluralsight;
    desc table courses;

Drop the existing "cc" column and replace it with a new "features" set column

    alter table courses drop cc;
    alter table courses add features set<varchar> static;

Add the "cc" value back to the "node-intro" course, and see what we have

    update courses set features = {'cc'} where id = 'node-intro';
    select distinct id, name, features from courses;

Add a few additional "fake" features to this course, using the "addition" method, and see what we have

    update courses set features = features + {'f1','f2'} where id = 'node-intro';
    select distinct id, name, features from courses;

Now remove these two features, using the "subtraction" method, and see what we have

    update courses set features = features - {'f1','f2'} where id = 'node-intro';
    select distinct id, name, features from courses;

-----

Add a new clips list column to the courses table, add some data and see what we have

    alter table courses add clips list<varchar>;
    update courses set clips = ['Introduction','Node.js Background'] where id = 'node-intro' and module_id = 1;
    select module_id, module_name, clips from courses where id = 'node-intro';

Append another clip using the "addition" method, and see what we have

    update courses set clips = clips + ['Getting Node'] where id = 'node-intro' and module_id = 1;
    select module_id, module_name, clips from courses where id = 'node-intro';

Fix the value of this newly added column by referring to the element by its position in the list, and see what we have

    update courses set clips[2] = 'Getting Node.js' where id = 'node-intro' and module_id = 1;
    select module_id, module_name, clips from courses where id = 'node-intro';

Append two more "fake" clips using the "addition method", and see what we have

    update courses set clips = clips + ['clip','clip'] where id = 'node-intro' and module_id = 1;
    select module_id, module_name, clips from courses where id = 'node-intro';
    select module_id, clips from courses where id = 'node-intro';

Remove the "fake" clips with the "subtraction" method (note that it removes *all* matching clips)

    update courses set clips = clips - ['clip'] where id = 'node-intro' and module_id = 1;
    select module_id, clips from courses where id = 'node-intro';

-----

From cqlsh, run the "source" command to load the "users" table from the module 3

    source '/scripts/m3/users.cql';
    
Add a map of "last logins" to the users table

    alter table users add last_login map<varchar,timestamp>;

Add a last login value for user John Doe using the "addition" method

    update users set last_login = last_login + {'383cc0867cd2':'2015-06-30 09:02:24'} where id = 'john-doe';

Add another value, but with a TTL and using a more traditional "map" approach, and see what we have

    update users using TTL 60 set last_login['7eb0a8997f39'] = '2015-07-02 07:32:17' where id = 'john-doe';
    select last_login from users where id = 'john-doe';

Keep running the select statement until the TTL is reached and the '7eb0a8997f39' value is removed from the map

-----

Drop and reload the "users" table

    drop table users;
    source '/scripts/m3/users.cql';

Add a new "last logins" map, but this time with a tuple value

    alter table users add last_login map<varchar,frozen<tuple<timestamp,inet>>>;

Add a last login value, and see what we have

    update users set last_login = last_login + {'3383cc0867cd2':('2015-06-30 09:02:24','98.203.153.64')} where id = 'john-doe';
    select last_login from users where id = 'john-doe';

----

Drop and reload the "courses" table

    drop table courses;
    source '/scripts/m4/courses.cql';

Create a "clip" User Defined Type, and use it to add a list of "clips" to the courses table

    create type clip (name varchar, duration int);
    alter table courses add clips list<frozen<clip>>;

Add clips to the "node-intro" course a couple of different ways, and see what we have

    insert into courses (id, module_id, clips) values ('node-intro',1,[{name: 'Introduction', duration: 38}]);
    update courses set clips = clips + [{name: 'Node.js Background', duration: 111}] where id = 'node-intro' and module_id = 1;
    select module_id, clips from courses where id = 'node-intro';

Drop and reload a courses table with 5 full sample courses

    drop table courses;
    source '/scripts/m5/courses.cql';

Look at the clips for a couple of other courses

    select module_id, clips from courses where id = 'docker-fundamentals';
    select module_id, clips from courses where id = 'angularjs-get-started';

    